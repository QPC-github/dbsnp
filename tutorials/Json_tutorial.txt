Tutorials for querying and processing dbSNP JSON

This document shows practical solutions for working with JSON format and retrieving data from the dbSNP2-built JSON files for typical inquiries.


Setup 
Basic questions and basic setup to start working with JSON file. There are tools that work with general JSON objects in small or medium scale.

1. Online tools for working with JSON
	http://www.jsoneditoronline.org/ for browsing JSON objects
	https://github.com/mattgodbolt/zindex.git for Indexing JSON file. Zindex search is 100X faster for system time and 33X faster for total time)
	https://stedolan.github.io/jq/ for query-like output of selected JSON elements

2. JSON object
JSON object files can be downloaded through dbSNP FTP site under .redesign: ftp://ftp.ncbi.nlm.nih.gov/snp/.redesign/latest_release/JSON/ 

3. JSON schema
The schema for the RefSNP JSON can be found at https://api.ncbi.nlm.nih.gov/variation/v0/, under /beta/refsnp/{rsid}, also at https://api.ncbi.nlm.nih.gov/variation/v0/var_service.yaml.

4. Browse and navigate JSON file
http://www.jsoneditoronline.org/ provides a free resource for navigating hierarchical JSON objects.  Start by copy-pasting rs268 to the editor, and clicking the 'right arrow'.  Click the 'left arrow' to get a pretty print of the object.

5. Index on JSON file for fast retrieval
	Install zindex tool from https://github.com/mattgodbolt/zindex.git
	Run 
./zindex <JSON file> --regex '<index_field>' --numeric

Examples:
./zindex refsnp-chr1.json.gz --regex 'refsnp_id":"([0-9]+)"' --numeric
./zindex refsnp-chr1.genes.json.gz --regex 'genes":\[\{".+?"id":([0-9]+),' --numeric	




Inquiries
In this section, we demonstrate the use of JSON files with a few typical inquiries for the dbSNP data.

1. Retrieve full JSON object for a single rs (e.g. rs268)
	Use the /beta/refsnp/{rsid} API at https://api.ncbi.nlm.nih.gov/variation/v0/
	Run on zindex-ed <JSON file>:
zq <JSON file> <RSID> 
Example:
zq refsnp-chr1.json.gz 268

2. Retrieve all rs reported on a gene (e.g. LPL)
	Since LPL is on chromosome 8, we can use zgrep on the chr8 file:
zgrep LPL JSON/refsnp-chr8.json.gz > LPL.json
	zq refsnp-chr1.genes.json.gz --raw 'select line from index_default where key = 3586' > /dev/null

3. Retrieve  descriptions from JSON for an arbitrary set of rs
	Create index for rs number on JSON file if needed:
		zindex refsnp-chr1.json.gz --regex 'refsnp_id":"([0-9]+)"' â€“numeric
	Get example script rsjson_allele_info_demo.py from here: https://github.com/ncbi/dbsnp/tree/master/tutorials
	Run query to retrieve a set of rs (ie. rs171, rs6025, rs6336). The 'rs' prefix is not required.
		zq refsnp-chr1.json.gz 171 6025 6336|python ./rsjson_allele_info_demo.py
Output
6025    C       coagulation factor V    F5      XM_017000660.1  CGA     1753    CGA     XP_016856149.1  R       396     R
6025    C       coagulation factor V    F5      NM_000130.4     CGA     1744    CGA     NP_000121.2     R       533     R
6025    T       coagulation factor V    F5      XM_017000660.1  CGA     1753    CAA     XP_016856149.1  R       396     Q
6025    T       coagulation factor V    F5      NM_000130.4     CGA     1744    CAA     NP_000121.2     R       533     Q
6336    C       neurotrophic receptor tyrosine kinase 1 NTRK1   NM_001007792.1  CAT     1781    CAT     NP_001007793.1  H       567     H
6336    C       neurotrophic receptor tyrosine kinase 1 NTRK1   NM_002529.3     CAT     1865    CAT     NP_002520.2     H       603     H
6336    C       neurotrophic receptor tyrosine kinase 1 NTRK1   NM_001012331.1  CAT     1847    CAT     NP_001012331.1  H       597     H
6336    T       neurotrophic receptor tyrosine kinase 1 NTRK1   NM_001007792.1  CAT     1781    TAT     NP_001007793.1  H       567     Y
6336    T       neurotrophic receptor tyrosine kinase 1 NTRK1   NM_002529.3     CAT     1865    TAT     NP_002520.2     H       603     Y
6336    T       neurotrophic receptor tyrosine kinase 1 NTRK1   NM_001012331.1  CAT     1847    TAT     NP_001012331.1  H       597     Y

4. Retrieve supporting ss for a selected rs rs268
Smaple query: get rs, handle, type, and supported ss or scv ID.
	Create index for rs number on JSON file
		zindex refsnp-chr1.json.gz --regex 'refsnp_id":"([0-9]+)"' --numeric
	Get example script rsjson_getss_info_demo.py from: https://github.com/ncbi/dbsnp/tree/master/tutorials
		zq refsnp-chr1.json.gz 80356763 | python ./rsjson_getss_info_demo.py
Output:
rs ID handle type ss or RCV
80356763 ILLUMINA subsnp ss161109467
80356763 GENEREVIEWS subsnp ss184955986
80356763 OMIM-CURATED-RECORDS subsnp ss262861249
80356763 ILLUMINA subsnp ss482077077
80356763 ILLUMINA subsnp ss483025937
80356763 ILLUMINA subsnp ss485814752
80356763 ILLUMINA subsnp ss485827447
80356763 ILLUMINA subsnp ss537652827
80356763 ILLUMINA subsnp ss778654271
80356763 ILLUMINA subsnp ss783353220
80356763 ILLUMINA subsnp ss784304347
80356763 ILLUMINA subsnp ss832615292
80356763 ILLUMINA subsnp ss834112140
80356763 EVA_EXAC subsnp ss1685815952
80356763 ILLUMINA subsnp ss1751872718
80356763 clinvar RCV000004574.3
80356763 clinvar RCV000020155.1

5. Retrieve a set of attributes across all rs (entire JSON)
Due to the large size of data, this task is suggested to be done with Hadoop MapReduce. Please see the 
Steps to take
	Step 1: You will need access to a hadoop cluster. Either request permission to use hadoop cluster with your system admin or set up your own (https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/ClusterSetup.html).
	Step 2: Install mrjob module (https://pythonhosted.org/mrjob/)
	Step 3: If the input files are not in hadoop file system yet, need to transfer: $>hdfs dfs -put path/to/your/input path/to/hadoop
	Step 4: Sample code can be downloaded from in the tutorial directory : https://github.com/ncbi/dbsnp/edit/master/tutorials/ 
	Step 5: Follow the README to check out and install the sample code.
	Step 6: To run: json_mr.py -r hadoop hdfs://path/to/input -o hdfs://path/to/output --no-output --jobconf mapreduce.job.name=test.mrjob --jobconf mapreduce.job.reduces=100 

6. Retrieve list of attributes (rs, attribute) from full JSON object
	Install jq tool from https://stedolan.github.io/jq/
	Run on zindex-ed file: zq refsnp-chr1.genes.json.gz --raw 'select line from index_default where key = 3586' | ./jq '.refsnp_id + " " + .status'

7. Select the first N rs from JSON file
	Index file using zindex
	Example for N=1000:  zq refsnp-chr1.json.gz --raw 'select line from index_default limit 10000' > /dev/null

8. Retrieve annotations for a given allele from a selected rs
JSON structure for a set of alleles (list) is separate from JSON structure for the allele annotations (list), and they need to be paired up according to position in the respective lists. We need a tool to accomplish that.
	rebuild index if needed as previously described.
		./zindex refsnp-chr1.json.gz --regex 'refsnp_id":"([0-9]+)"' --numeric
	Get example script ./rsjson_allele_info_demo.py from here: https://github.com/ncbi/dbsnp/tree/master/tutorials
	
Sample query for rs80356763:  zq refsnp-chr1.json.gz 80356763 | python ./rsjson_allele_info_demo.py
Output: 
80356763        C       glucosidase, beta, acid GBA     NM_001171811.1  CGC     749     CGC     NP_001165282.1  R       82      R
80356763        C       glucosidase, beta, acid GBA     NM_001005742.2  CGC     913     CGC     NP_001005742.1  R       169     R
80356763        C       glucosidase, beta, acid GBA     NM_001005741.2  CGC     932     CGC     NP_001005741.1  R       169     R
80356763        C       glucosidase, beta, acid GBA     NM_000157.3     CGC     673     CGC     NP_000148.2     R       169     R
80356763        C       glucosidase, beta, acid GBA     NM_001171812.1  CGC     523     CGC     NP_001165283.1  R       120     R
80356763        A       glucosidase, beta, acid GBA     NM_001171811.1  CGC     749     CTC     NP_001165282.1  R       82      L
80356763        A       glucosidase, beta, acid GBA     NM_001005742.2  CGC     913     CTC     NP_001005742.1  R       169     L
80356763        A       glucosidase, beta, acid GBA     NM_001005741.2  CGC     932     CTC     NP_001005741.1  R       169     L
80356763        A       glucosidase, beta, acid GBA     NM_000157.3     CGC     673     CTC     NP_000148.2     R       169     L
80356763        A       glucosidase, beta, acid GBA     NM_001171812.1  CGC     523     CTC     NP_001165283.1  R       120     L
80356763        G       glucosidase, beta, acid GBA     NM_001171811.1  CGC     749     CCC     NP_001165282.1  R       82      P
80356763        G       glucosidase, beta, acid GBA     NM_001005742.2  CGC     913     CCC     NP_001005742.1  R       169     P
80356763        G       glucosidase, beta, acid GBA     NM_001005741.2  CGC     932     CCC     NP_001005741.1  R       169     P
80356763        G       glucosidase, beta, acid GBA     NM_000157.3     CGC     673     CCC     NP_000148.2     R       169     P
80356763        G       glucosidase, beta, acid GBA     NM_001171812.1  CGC     523     CCC     NP_001165283.1  R       120     P
80356763        T       glucosidase, beta, acid GBA     NM_001171811.1  CGC     749     CAC     NP_001165282.1  R       82      H
80356763        T       glucosidase, beta, acid GBA     NM_001005742.2  CGC     913     CAC     NP_001005742.1  R       169     H
80356763        T       glucosidase, beta, acid GBA     NM_001005741.2  CGC     932     CAC     NP_001005741.1  R       169     H
80356763        T       glucosidase, beta, acid GBA     NM_000157.3     CGC     673     CAC     NP_000148.2     R       169     H
80356763        T       glucosidase, beta, acid GBA     NM_001171812.1  CGC     523     CAC     NP_001165283.1  R       120     H
